{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/04/11/hello-world/"},{"title":"My New Post2","text":"","link":"/2023/03/02/My-New-Post2/"},{"title":"Hello Worldxxx","text":"英语达到B1级别 - CERF 每月产生Blog（5/10/15 ？） spend more time to youtube instead of bilibili 录制视频并开始剪辑 看5本技术方面的书记 从v2上看到的 1 、每天早起花大概一个小时背 50 个单词，建议先背那些核心的高频的单词，一开始可以少背一点，比如 1 个，但要确保每天都能按时完成。背单词推荐 百词斩 app ，背的时候例句也要读两遍，注意不要用读书时那种拼音法，就单纯读单词发音即可，连中文翻译也不要去读，可以用铅笔边写边读。2 、午休花大概十分钟看两篇英语阅读，看不懂没关系，可以查单词，记得一定要看完。阅读推荐百词斩精选文章，不够看的话就再下个 扇贝阅读，觉得不好看就再下个 英语读书 app 。3 、晚上睡前使用 英语流利说 app 的 真人对话 进行口语练习，那个其实很好玩的，记住不要玩过头。4 、每天早起第一件事打开手机，并使用 每日英语听力 app 播放 CNN 听力 或 CRI 或 Fox talk everywhere 等外国电台，不用刻意去听，一开始会觉得很烦，后面习惯了反而觉得书舍更热闹了，有了点生活气息。5 、把电脑和手机的语言都设置成英文的，这个对我来说反而作用最大，因为前面的我经常是三天打鱼，两天晒网。6 、觉得不够还可以在睡前写个英语日记。 综上，听说读写都有了，只要能够坚持，只需一年就可以看到非常明显的提升。像我一般坚持两三个月就荒废个大半年，不过一直都有在学，个人感觉现在看英文文档不会有那么吃力的，至少不会有以前那种只要看到是英文就恐惧得掉头。 现在我又开始重启英语学习计划了，现在是每天早上至少背 10 个单词，仅此而已，剩下的后面再一点一点往上加，最重要的是坚持，所以量少没关系的。","link":"/2023/04/11/test/20231212/"},{"title":"My New Post","text":"","link":"/2023/03/02/My-New-Post/"},{"title":"抽象类、普通类、接口的一些思考","text":"2023年1月11日 最近重构代码时，希望一些通用的功能被多个子类复用。第一时间想到的是抽出为工具类，但工具类是静态类，而此功能需要动态注入一些资源文件，导致此种方法作罢。 其次就是继承，将通用的方法写入父类中，子类通过继承来使用通用的方法。但CR时发现此父类应该是抽象类，而不是普通类。进而引发了对抽象类、普通类、接口的一些思考。 抽象类的应用场景第一种场景通用的功能被多个子类复用的时候 比如说，AbstractPlayer 抽象类中有一个普通的方法 sleep()，表明所有运动员都需要休息，那么这个方法就可以被子类复用。 12345abstract class AbstractPlayer { public void sleep() { System.out.println(&quot;运动员也要休息而不是挑战极限&quot;); }} 子类 BasketballPlayer 继承了 AbstractPlayer 类： 12class BasketballPlayer extends AbstractPlayer {} 也就拥有了 sleep() 方法。BasketballPlayer 的对象可以直接调用父类的 sleep() 方法： 12BasketballPlayer basketballPlayer = new BasketballPlayer();basketballPlayer.sleep(); 子类 FootballPlayer 继承了 AbstractPlayer 类： 12class FootballPlayer extends AbstractPlayer {} 也拥有了 sleep() 方法，FootballPlayer 的对象也可以直接调用父类的 sleep() 方法： 12FootballPlayer footballPlayer = new FootballPlayer();footballPlayer.sleep(); 这样是不是就实现了代码的复用。 第二种场景在抽象类中定义好接口，然后子类中去实现。 比如说，AbstractPlayer 抽象类中定义了一个抽象方法 play()，表明所有运动员都可以从事某项运动，但需要对应子类去扩展实现，表明篮球运动员打篮球，足球运动员踢足球。 123abstract class AbstractPlayer { abstract void play();} BasketballPlayer 继承了 AbstractPlayer 类，扩展实现了自己的 play() 方法。 123456public class BasketballPlayer extends AbstractPlayer { @Override void play() { System.out.println(&quot;我是张伯伦，我篮球场上得过 100 分，&quot;); }} FootballPlayer 继承了 AbstractPlayer 类，扩展实现了自己的 play() 方法。 123456public class FootballPlayer extends AbstractPlayer { @Override void play() { System.out.println(&quot;我是C罗，我能接住任意高度的头球&quot;); }} 抽象类与普通类 问： 把父类改成抽象类，方法改成抽象方法，那么public void play(); 子类不变，依然重写父类方法，那这个跟普通父类没区别啊？难道说就一个抽象方法没方法体就完事了？？那我普通方法有方法体，我空着不写内容不就得了，不跟抽象方法一个样吗？？别跟我说抽象类还不能实例化，哥也不需要去new它！普通类都能搞定的，还弄个抽象类有什么意义？我前面都说了普通类的方法我可以空着不写，达到跟抽象类方法没方法体一样的效果。既然两种方式都能达到同一个输出效果，弄一种方式不就得了，那为什么还要创造出一个抽象类出来？难道是比普通类看着舒服？用着爽？还是更加便捷？还是为了强制让别人用的时候必须强制化实现抽象方法省的你忘了什么的？ 答： 就是为了强制不能实例化，以及强制子类必须实现方法这不是你忘不忘的问题，你说你不去new它就行了，这话没错。那你想另一个问题，为什么要有访问控制呢？为什么要有private和public之分呢？我可以全部public，不该访问的，我不访问就行了啊？小程序里，看不出什么区别，反而private成员要写一堆set和get函数，多麻烦，我自己写小程序的时候也会偷懒全部public，但是项目大了，代码多了，这种严谨的结构就很重要了。且不说会有很多人合作一起写一个程序，哪怕还是你一个人写，也保不住有忘记的时候，那时候编译器不报错，茫茫码海上哪找错误去面向对象说到底就是方便你思考，易扩展、易维护管理，硬要说没必要，整个面向对象都没必要了，C语言有什么干不了的呀，运行效率还高。 总而言之使用继承的时候，一定要继承抽象类，或者抽象类的子类。 抽象类与接口接口是对动作的抽象，抽象类是对本质的抽象。 抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人和女人，他们的抽象类是人类，而猫和狗的抽象类是宠物类。人类可以吃东西，宠物类也可以吃东西，但是两者不能混为一谈，因为有本质的区别。这个“吃东西”是一个动作，你可以把“吃东西”定义成一个接口，然后让两个类去实现它的方法。 所以，在高级语言上，一个类只能继承一个类或抽象类，正如人不可能同时是动物类又是植物类，但是可以实现多个接口，例如，吃饭接口、呼吸接口等。 使用差异a.抽象类 和 接口 都是用来抽象具体对象的，但是接口的抽象级别最高； b.抽象类可以有具体的方法和属性, 接口只能有抽象方法和==不可变常量(final)==； c.抽象类主要用来抽象类别,接口主要用来抽象功能； d.抽象类中不包含任何实现，派生类必须覆盖它们。接口中所有方法都必须是未实现的； e.抽象类实现接口时，接口的方法在抽象类中可以被实现也可以不被实现，而普通实现接口必须实现所有接口方法。 使用方向 当你关注一个事物的本质的时候，用抽象类； 当你关注一个操作的时候，用接口。 小结抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。 参考Java 抽象类、普通类、接口的区别——值得你一看的干货Java抽象类，看这一篇就够了，豁然开朗","link":"/2023/01/11/Blog/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%99%AE%E9%80%9A%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"test","slug":"test","link":"/categories/test/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}],"pages":[]}